01) A seguir iremos criar uma rota na aplicação que
    será usada para listar todos os agendamentos.


02) Criando rota do tipo "get" no arquivo "appointments.router.ts":

    import { Router } from 'express';
    import { startOfHour, parseISO } from 'date-fns';

    import AppointmentsRepository from '../repositories/AppointmentsRepository';

    const appointmentsRouter = Router();

    const appointmentsRepository = new AppointmentsRepository();

    appointmentsRouter.get('/', (request, response) => {  //  <<<<<<<<

    });  //  <<<<<<<<

    appointmentsRouter.post('/', (request, response) => {
      const { provider, date } = request.body;

      const parsedDate = startOfHour(parseISO(date));

      const findAppointmentInSameDate = appointmentsRepository.findByDate(
        parsedDate,
      );

      if (findAppointmentInSameDate) {
        return response.status(400).json({
          message:
            'O horário escolhido não está disponível, por favor, tente outro.',
        });
      }

      const appointment = appointmentsRepository.create(provider, parsedDate);

      return response.json(appointment);
    });

    export default appointmentsRouter;


03) Criando método dentro do "AppointmentsRepository" para retornar todos os "registros" de agendamentos:

    import { isEqual } from 'date-fns';

    import Appointment from '../models/Appointment';

    class AppointmentsRepository {
      private appointments: Appointment[];

      constructor() {
        this.appointments = [];
      }

      public create(provider: string, date: Date): Appointment {
        const appointment = new Appointment(provider, date);

        this.appointments.push(appointment);

        return appointment;
      }

      public All(): Appointment[] {  //  <<<<<<<
        return this.appointments;  //  <<<<<<<
      }  //  <<<<<<<

      public findByDate(date: Date): Appointment | null {
        const findAppointment = this.appointments.find((appointment) =>
          isEqual(date, appointment.date),
        );

        return findAppointment || null;
      }
    }

    export default AppointmentsRepository;


04) Criando variável dentro da rota "get" para retornar os "agendamentos"
    através do método "all()" recém criado na classe "AppointmentsRepository":

    import { Router } from 'express';
    import { startOfHour, parseISO } from 'date-fns';

    import AppointmentsRepository from '../repositories/AppointmentsRepository';

    const appointmentsRouter = Router();

    const appointmentsRepository = new AppointmentsRepository();

    appointmentsRouter.get('/', (request, response) => {
      const appointments = appointmentsRepository.All();  // <<<<<<<<

      return response.json(appointments);  // <<<<<<<<
    });

    appointmentsRouter.post('/', (request, response) => {
      const { provider, date } = request.body;

      const parsedDate = startOfHour(parseISO(date));

      const findAppointmentInSameDate = appointmentsRepository.findByDate(
        parsedDate,
      );

      if (findAppointmentInSameDate) {
        return response.status(400).json({
          message:
            'O horário escolhido não está disponível, por favor, tente outro.',
        });
      }

      const appointment = appointmentsRepository.create(provider, parsedDate);

      return response.json(appointment);
    });

    export default appointmentsRouter;


05) Testando a rota "get" através do Insmonia:

    Dados enviados na requisição:
    nenhum, porque é uma rota do tipo "get" que não recebe parâmetros.

    Dados recebidos na reposta:

    [
      {
        "id": "06d62d91-cfcc-4aec-a4ef-d23091a77c78",
        "provider": "yago teste",
        "date": "2020-04-27T22:00:00.000Z"
      }
    ]
