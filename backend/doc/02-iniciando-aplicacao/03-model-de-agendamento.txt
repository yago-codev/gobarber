01) O primeiro conceito que iremos aplicar para começarmos a
    isolar as responsabilidades do nosso arquivo de "appointments.routes.ts" é
    criar um Model.

    Um Model irá definir qual é o formato dos dados presentes na "entidade".


02) Criando a pasta "models" dentro de "src"


03) Criar o arquivo do model "appointment":

    src/models/Appointment.ts


04) A estrutura das entidades (models) serão escritas no formato de Classe:

    import { uuid } from 'uuidv4';

    class Appointment {
      id: string;

      provider: string;

      date: Date;

      constructor(provider: string, date: Date) {
        this.id = uuid();
        this.provider = provider;
        this.date = date;
      }
    }

    export default Appointment;


05) Agora iremos remover a "interface" declarada no arquivo "appointment.routes.ts" e
    importar a nossa entidade "model" Appointment.ts:

    import { Router } from 'express';
    import { uuid } from 'uuidv4';
    import { startOfHour, parseISO, isEqual } from 'date-fns';

    import Appointment from '../models/Appointment';  //  <<<<<<<<<<<<<<<

    const appointmentsRouter = Router();

    const appointments: Appointment[] = [];

    appointmentsRouter.post('/', (request, response) => {
      const { provider, date } = request.body;

      const parsedDate = startOfHour(parseISO(date));

      const findAppointmentInSameDate = appointments.find((appointment) =>
        isEqual(parsedDate, appointment.date),
      );

      if (findAppointmentInSameDate) {
        return response.status(400).json({
          message:
            'O horário escolhido não está disponível, por favor, tente outro.',
        });
      }

      const appointment = {
        id: uuid(),
        provider,
        date: parsedDate,
      };

      appointments.push(appointment);

      return response.json(appointment);
    });

    export default appointmentsRouter;


06) Agora iremos refatorar a forma como estamos criando um novo agendamento:

    Antes era assim:

    import { Router } from 'express';
    import { uuid } from 'uuidv4';
    import { startOfHour, parseISO, isEqual } from 'date-fns';

    import Appointment from '../models/Appointment';

    const appointmentsRouter = Router();

    const appointments: Appointment[] = [];

    appointmentsRouter.post('/', (request, response) => {
      const { provider, date } = request.body;

      const parsedDate = startOfHour(parseISO(date));

      const findAppointmentInSameDate = appointments.find((appointment) =>
        isEqual(parsedDate, appointment.date),
      );

      if (findAppointmentInSameDate) {
        return response.status(400).json({
          message:
            'O horário escolhido não está disponível, por favor, tente outro.',
        });
      }

      const appointment = {  //  <<<<<<<<<
        id: uuid(),  //  <<<<<<<<<
        provider,  //  <<<<<<<<<
        date: parsedDate,  //  <<<<<<<<<
      };  //  <<<<<<<<<

      appointments.push(appointment);

      return response.json(appointment);
    });

    export default appointmentsRouter;


    Agora utilizaremos a Classe/Model/Entidade "Appointment",
    passando os dados dentro do construtor:

    import { Router } from 'express';
    import { startOfHour, parseISO, isEqual } from 'date-fns';

    import Appointment from '../models/Appointment';

    const appointmentsRouter = Router();

    const appointments: Appointment[] = [];

    appointmentsRouter.post('/', (request, response) => {
      const { provider, date } = request.body;

      const parsedDate = startOfHour(parseISO(date));

      const findAppointmentInSameDate = appointments.find((appointment) =>
        isEqual(parsedDate, appointment.date),
      );

      if (findAppointmentInSameDate) {
        return response.status(400).json({
          message:
            'O horário escolhido não está disponível, por favor, tente outro.',
        });
      }

      const appointment = new Appointment(provider, parsedDate);  //  <<<<<<<<<<<<<<

      appointments.push(appointment);

      return response.json(appointment);
    });

    export default appointmentsRouter;
